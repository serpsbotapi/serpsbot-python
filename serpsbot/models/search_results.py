# coding: utf-8

"""
    SerpsBot

    Our APIs allow data miners to harvest huge volumes of data from Google and other search engines.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'featured_snippet': 'AllOfSearchResultsFeaturedSnippet',
        'organic': 'list[SearchResult]',
        'people_also_ask': 'list[PeopleAlsoAsk]'
    }

    attribute_map = {
        'featured_snippet': 'featured_snippet',
        'organic': 'organic',
        'people_also_ask': 'people_also_ask'
    }

    def __init__(self, featured_snippet=None, organic=None, people_also_ask=None):  # noqa: E501
        """SearchResults - a model defined in Swagger"""  # noqa: E501
        self._featured_snippet = None
        self._organic = None
        self._people_also_ask = None
        self.discriminator = None
        if featured_snippet is not None:
            self.featured_snippet = featured_snippet
        self.organic = organic
        self.people_also_ask = people_also_ask

    @property
    def featured_snippet(self):
        """Gets the featured_snippet of this SearchResults.  # noqa: E501

        Featured snippet if available for the query.  # noqa: E501

        :return: The featured_snippet of this SearchResults.  # noqa: E501
        :rtype: AllOfSearchResultsFeaturedSnippet
        """
        return self._featured_snippet

    @featured_snippet.setter
    def featured_snippet(self, featured_snippet):
        """Sets the featured_snippet of this SearchResults.

        Featured snippet if available for the query.  # noqa: E501

        :param featured_snippet: The featured_snippet of this SearchResults.  # noqa: E501
        :type: AllOfSearchResultsFeaturedSnippet
        """

        self._featured_snippet = featured_snippet

    @property
    def organic(self):
        """Gets the organic of this SearchResults.  # noqa: E501

        List of all organic search results found for the query phrase.  # noqa: E501

        :return: The organic of this SearchResults.  # noqa: E501
        :rtype: list[SearchResult]
        """
        return self._organic

    @organic.setter
    def organic(self, organic):
        """Sets the organic of this SearchResults.

        List of all organic search results found for the query phrase.  # noqa: E501

        :param organic: The organic of this SearchResults.  # noqa: E501
        :type: list[SearchResult]
        """
        if organic is None:
            raise ValueError("Invalid value for `organic`, must not be `None`")  # noqa: E501

        self._organic = organic

    @property
    def people_also_ask(self):
        """Gets the people_also_ask of this SearchResults.  # noqa: E501

        List of questions similar to the search query.  # noqa: E501

        :return: The people_also_ask of this SearchResults.  # noqa: E501
        :rtype: list[PeopleAlsoAsk]
        """
        return self._people_also_ask

    @people_also_ask.setter
    def people_also_ask(self, people_also_ask):
        """Sets the people_also_ask of this SearchResults.

        List of questions similar to the search query.  # noqa: E501

        :param people_also_ask: The people_also_ask of this SearchResults.  # noqa: E501
        :type: list[PeopleAlsoAsk]
        """
        if people_also_ask is None:
            raise ValueError("Invalid value for `people_also_ask`, must not be `None`")  # noqa: E501

        self._people_also_ask = people_also_ask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
