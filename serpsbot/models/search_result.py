# coding: utf-8

"""
    SerpsBot

    Our APIs allow data miners to harvest huge volumes of data from Google and other search engines.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'url': 'str',
        'rank': 'int',
        'snippet': 'str',
        'snippet_html': 'str',
        'rich_snippet': 'str'
    }

    attribute_map = {
        'title': 'title',
        'url': 'url',
        'rank': 'rank',
        'snippet': 'snippet',
        'snippet_html': 'snippet_html',
        'rich_snippet': 'rich_snippet'
    }

    def __init__(self, title=None, url=None, rank=None, snippet=None, snippet_html=None, rich_snippet=None):  # noqa: E501
        """SearchResult - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._url = None
        self._rank = None
        self._snippet = None
        self._snippet_html = None
        self._rich_snippet = None
        self.discriminator = None
        self.title = title
        self.url = url
        self.rank = rank
        if snippet is not None:
            self.snippet = snippet
        if snippet_html is not None:
            self.snippet_html = snippet_html
        if rich_snippet is not None:
            self.rich_snippet = rich_snippet

    @property
    def title(self):
        """Gets the title of this SearchResult.  # noqa: E501

        Browser title of the web page.  # noqa: E501

        :return: The title of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchResult.

        Browser title of the web page.  # noqa: E501

        :param title: The title of this SearchResult.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def url(self):
        """Gets the url of this SearchResult.  # noqa: E501

        URL of the web page.  # noqa: E501

        :return: The url of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SearchResult.

        URL of the web page.  # noqa: E501

        :param url: The url of this SearchResult.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def rank(self):
        """Gets the rank of this SearchResult.  # noqa: E501

        The rank of the web page in organic SERPs.  # noqa: E501

        :return: The rank of this SearchResult.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this SearchResult.

        The rank of the web page in organic SERPs.  # noqa: E501

        :param rank: The rank of this SearchResult.  # noqa: E501
        :type: int
        """
        if rank is None:
            raise ValueError("Invalid value for `rank`, must not be `None`")  # noqa: E501

        self._rank = rank

    @property
    def snippet(self):
        """Gets the snippet of this SearchResult.  # noqa: E501

        The meta description snippet that Google shows in SERPs.  # noqa: E501

        :return: The snippet of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this SearchResult.

        The meta description snippet that Google shows in SERPs.  # noqa: E501

        :param snippet: The snippet of this SearchResult.  # noqa: E501
        :type: str
        """

        self._snippet = snippet

    @property
    def snippet_html(self):
        """Gets the snippet_html of this SearchResult.  # noqa: E501

        The HTML source of the meta description snippet.  # noqa: E501

        :return: The snippet_html of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._snippet_html

    @snippet_html.setter
    def snippet_html(self, snippet_html):
        """Sets the snippet_html of this SearchResult.

        The HTML source of the meta description snippet.  # noqa: E501

        :param snippet_html: The snippet_html of this SearchResult.  # noqa: E501
        :type: str
        """

        self._snippet_html = snippet_html

    @property
    def rich_snippet(self):
        """Gets the rich_snippet of this SearchResult.  # noqa: E501

        Rich snippet data HTML if available.  # noqa: E501

        :return: The rich_snippet of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._rich_snippet

    @rich_snippet.setter
    def rich_snippet(self, rich_snippet):
        """Sets the rich_snippet of this SearchResult.

        Rich snippet data HTML if available.  # noqa: E501

        :param rich_snippet: The rich_snippet of this SearchResult.  # noqa: E501
        :type: str
        """

        self._rich_snippet = rich_snippet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
