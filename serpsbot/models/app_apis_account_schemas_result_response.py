# coding: utf-8

"""
    SerpsBot

    Our APIs allow data miners to harvest huge volumes of data from Google and other search engines.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppApisAccountSchemasResultResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'has_api_access': 'bool',
        'balance': 'float',
        'statistics': 'AllOfappApisAccountSchemasResultResponseStatistics'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'has_api_access': 'has_api_access',
        'balance': 'balance',
        'statistics': 'statistics'
    }

    def __init__(self, id=None, first_name=None, last_name=None, email=None, has_api_access=None, balance=None, statistics=None):  # noqa: E501
        """AppApisAccountSchemasResultResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._has_api_access = None
        self._balance = None
        self._statistics = None
        self.discriminator = None
        self.id = id
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.has_api_access = has_api_access
        self.balance = balance
        self.statistics = statistics

    @property
    def id(self):
        """Gets the id of this AppApisAccountSchemasResultResponse.  # noqa: E501

        ID of the user. This uniquely identifies the user in our database.  # noqa: E501

        :return: The id of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppApisAccountSchemasResultResponse.

        ID of the user. This uniquely identifies the user in our database.  # noqa: E501

        :param id: The id of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this AppApisAccountSchemasResultResponse.  # noqa: E501

        The first name of the user.  # noqa: E501

        :return: The first_name of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AppApisAccountSchemasResultResponse.

        The first name of the user.  # noqa: E501

        :param first_name: The first_name of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AppApisAccountSchemasResultResponse.  # noqa: E501

        The last name of the user.  # noqa: E501

        :return: The last_name of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AppApisAccountSchemasResultResponse.

        The last name of the user.  # noqa: E501

        :param last_name: The last_name of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this AppApisAccountSchemasResultResponse.  # noqa: E501

        The email address of the user.  # noqa: E501

        :return: The email of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AppApisAccountSchemasResultResponse.

        The email address of the user.  # noqa: E501

        :param email: The email of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def has_api_access(self):
        """Gets the has_api_access of this AppApisAccountSchemasResultResponse.  # noqa: E501

        Tells either the user has the API access or not. i.e When balance falls to zero, API access is diabled for users.  # noqa: E501

        :return: The has_api_access of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_api_access

    @has_api_access.setter
    def has_api_access(self, has_api_access):
        """Sets the has_api_access of this AppApisAccountSchemasResultResponse.

        Tells either the user has the API access or not. i.e When balance falls to zero, API access is diabled for users.  # noqa: E501

        :param has_api_access: The has_api_access of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :type: bool
        """
        if has_api_access is None:
            raise ValueError("Invalid value for `has_api_access`, must not be `None`")  # noqa: E501

        self._has_api_access = has_api_access

    @property
    def balance(self):
        """Gets the balance of this AppApisAccountSchemasResultResponse.  # noqa: E501

        Prepaid account balance of the user (in USD).  # noqa: E501

        :return: The balance of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AppApisAccountSchemasResultResponse.

        Prepaid account balance of the user (in USD).  # noqa: E501

        :param balance: The balance of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :type: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def statistics(self):
        """Gets the statistics of this AppApisAccountSchemasResultResponse.  # noqa: E501

        The account statistics including stats on monthly and all-time API calls, jobs count, and so on.  # noqa: E501

        :return: The statistics of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :rtype: AllOfappApisAccountSchemasResultResponseStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this AppApisAccountSchemasResultResponse.

        The account statistics including stats on monthly and all-time API calls, jobs count, and so on.  # noqa: E501

        :param statistics: The statistics of this AppApisAccountSchemasResultResponse.  # noqa: E501
        :type: AllOfappApisAccountSchemasResultResponseStatistics
        """
        if statistics is None:
            raise ValueError("Invalid value for `statistics`, must not be `None`")  # noqa: E501

        self._statistics = statistics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppApisAccountSchemasResultResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppApisAccountSchemasResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
