# coding: utf-8

"""
    SerpsBot

    Our APIs allow data miners to harvest huge volumes of data from Google and other search engines.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppApisGoogleImagesSchemasSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'gl': 'str',
        'hl': 'str',
        'device': 'str',
        'duration': 'str',
        'autocorrect': 'int',
        'page': 'int',
        'uule': 'str',
        'pages': 'int',
        'size': 'str',
        'license': 'str',
        'color': 'str',
        'type': 'str'
    }

    attribute_map = {
        'query': 'query',
        'gl': 'gl',
        'hl': 'hl',
        'device': 'device',
        'duration': 'duration',
        'autocorrect': 'autocorrect',
        'page': 'page',
        'uule': 'uule',
        'pages': 'pages',
        'size': 'size',
        'license': 'license',
        'color': 'color',
        'type': 'type'
    }

    def __init__(self, query=None, gl='US', hl='en_US', device='desktop', duration=None, autocorrect=0, page=1, uule=None, pages=1, size='any', license='any', color='any', type='any'):  # noqa: E501
        """AppApisGoogleImagesSchemasSearchRequest - a model defined in Swagger"""  # noqa: E501
        self._query = None
        self._gl = None
        self._hl = None
        self._device = None
        self._duration = None
        self._autocorrect = None
        self._page = None
        self._uule = None
        self._pages = None
        self._size = None
        self._license = None
        self._color = None
        self._type = None
        self.discriminator = None
        self.query = query
        if gl is not None:
            self.gl = gl
        if hl is not None:
            self.hl = hl
        if device is not None:
            self.device = device
        if duration is not None:
            self.duration = duration
        if autocorrect is not None:
            self.autocorrect = autocorrect
        if page is not None:
            self.page = page
        if uule is not None:
            self.uule = uule
        if pages is not None:
            self.pages = pages
        if size is not None:
            self.size = size
        if license is not None:
            self.license = license
        if color is not None:
            self.color = color
        if type is not None:
            self.type = type

    @property
    def query(self):
        """Gets the query of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        The search query phrase. All Google Search filters are supported.  # noqa: E501

        :return: The query of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this AppApisGoogleImagesSchemasSearchRequest.

        The search query phrase. All Google Search filters are supported.  # noqa: E501

        :param query: The query of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def gl(self):
        """Gets the gl of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        The ISO code of the country to get targeted search results.  # noqa: E501

        :return: The gl of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._gl

    @gl.setter
    def gl(self, gl):
        """Sets the gl of this AppApisGoogleImagesSchemasSearchRequest.

        The ISO code of the country to get targeted search results.  # noqa: E501

        :param gl: The gl of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: str
        """

        self._gl = gl

    @property
    def hl(self):
        """Gets the hl of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        The language to get targeted search results.  # noqa: E501

        :return: The hl of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._hl

    @hl.setter
    def hl(self, hl):
        """Sets the hl of this AppApisGoogleImagesSchemasSearchRequest.

        The language to get targeted search results.  # noqa: E501

        :param hl: The hl of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: str
        """

        self._hl = hl

    @property
    def device(self):
        """Gets the device of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501


        :return: The device of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this AppApisGoogleImagesSchemasSearchRequest.


        :param device: The device of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def duration(self):
        """Gets the duration of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        Duration to get search results updated during the specified time period. <code>d</code> for last 24 hours, <code>w</code> for last 1 week, <code>m</code> for last 1 month, <code>mn</code> for last n months, and <code>y</code> for last 1 year.  # noqa: E501

        :return: The duration of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AppApisGoogleImagesSchemasSearchRequest.

        Duration to get search results updated during the specified time period. <code>d</code> for last 24 hours, <code>w</code> for last 1 week, <code>m</code> for last 1 month, <code>mn</code> for last n months, and <code>y</code> for last 1 year.  # noqa: E501

        :param duration: The duration of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def autocorrect(self):
        """Gets the autocorrect of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        Should Google autocorrect your typos? Send 1 if that's the case or send 0 if you want to disable autocorrection.  # noqa: E501

        :return: The autocorrect of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._autocorrect

    @autocorrect.setter
    def autocorrect(self, autocorrect):
        """Sets the autocorrect of this AppApisGoogleImagesSchemasSearchRequest.

        Should Google autocorrect your typos? Send 1 if that's the case or send 0 if you want to disable autocorrection.  # noqa: E501

        :param autocorrect: The autocorrect of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: int
        """

        self._autocorrect = autocorrect

    @property
    def page(self):
        """Gets the page of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        The page to get search results for. By default, the first page's results are returned.  # noqa: E501

        :return: The page of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this AppApisGoogleImagesSchemasSearchRequest.

        The page to get search results for. By default, the first page's results are returned.  # noqa: E501

        :param page: The page of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def uule(self):
        """Gets the uule of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        An encoded string to force a place or an exact location to get targeted results.  # noqa: E501

        :return: The uule of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._uule

    @uule.setter
    def uule(self, uule):
        """Sets the uule of this AppApisGoogleImagesSchemasSearchRequest.

        An encoded string to force a place or an exact location to get targeted results.  # noqa: E501

        :param uule: The uule of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: str
        """

        self._uule = uule

    @property
    def pages(self):
        """Gets the pages of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        How many pages to get? By default, a single results page is retrieved.  # noqa: E501

        :return: The pages of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this AppApisGoogleImagesSchemasSearchRequest.

        How many pages to get? By default, a single results page is retrieved.  # noqa: E501

        :param pages: The pages of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: int
        """

        self._pages = pages

    @property
    def size(self):
        """Gets the size of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        Size (any, large, medium, icon) of the images to consider while searching.  # noqa: E501

        :return: The size of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AppApisGoogleImagesSchemasSearchRequest.

        Size (any, large, medium, icon) of the images to consider while searching.  # noqa: E501

        :param size: The size of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def license(self):
        """Gets the license of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        License type to consider in order to find images with proper usage rights.  # noqa: E501

        :return: The license of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this AppApisGoogleImagesSchemasSearchRequest.

        License type to consider in order to find images with proper usage rights.  # noqa: E501

        :param license: The license of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def color(self):
        """Gets the color of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        Color to consider in order to find images with required colors.  # noqa: E501

        :return: The color of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AppApisGoogleImagesSchemasSearchRequest.

        Color to consider in order to find images with required colors.  # noqa: E501

        :param color: The color of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def type(self):
        """Gets the type of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501

        Type to consider in order to find images of intended type.  # noqa: E501

        :return: The type of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AppApisGoogleImagesSchemasSearchRequest.

        Type to consider in order to find images of intended type.  # noqa: E501

        :param type: The type of this AppApisGoogleImagesSchemasSearchRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppApisGoogleImagesSchemasSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppApisGoogleImagesSchemasSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
