# coding: utf-8

"""
    SerpsBot

    Our APIs allow data miners to harvest huge volumes of data from Google and other search engines.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExtendedSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'gl': 'str',
        'hl': 'str',
        'device': 'str',
        'duration': 'str',
        'autocorrect': 'int',
        'page': 'int',
        'uule': 'str',
        'num': 'int',
        'output': 'str'
    }

    attribute_map = {
        'query': 'query',
        'gl': 'gl',
        'hl': 'hl',
        'device': 'device',
        'duration': 'duration',
        'autocorrect': 'autocorrect',
        'page': 'page',
        'uule': 'uule',
        'num': 'num',
        'output': 'output'
    }

    def __init__(self, query=None, gl='US', hl='en_US', device='desktop', duration=None, autocorrect=0, page=1, uule=None, num=20, output='json'):  # noqa: E501
        """ExtendedSearchRequest - a model defined in Swagger"""  # noqa: E501
        self._query = None
        self._gl = None
        self._hl = None
        self._device = None
        self._duration = None
        self._autocorrect = None
        self._page = None
        self._uule = None
        self._num = None
        self._output = None
        self.discriminator = None
        self.query = query
        if gl is not None:
            self.gl = gl
        if hl is not None:
            self.hl = hl
        if device is not None:
            self.device = device
        if duration is not None:
            self.duration = duration
        if autocorrect is not None:
            self.autocorrect = autocorrect
        if page is not None:
            self.page = page
        if uule is not None:
            self.uule = uule
        if num is not None:
            self.num = num
        if output is not None:
            self.output = output

    @property
    def query(self):
        """Gets the query of this ExtendedSearchRequest.  # noqa: E501

        The search query phrase. All Google Search filters are supported.  # noqa: E501

        :return: The query of this ExtendedSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ExtendedSearchRequest.

        The search query phrase. All Google Search filters are supported.  # noqa: E501

        :param query: The query of this ExtendedSearchRequest.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def gl(self):
        """Gets the gl of this ExtendedSearchRequest.  # noqa: E501

        The ISO code of the country to get targeted search results.  # noqa: E501

        :return: The gl of this ExtendedSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._gl

    @gl.setter
    def gl(self, gl):
        """Sets the gl of this ExtendedSearchRequest.

        The ISO code of the country to get targeted search results.  # noqa: E501

        :param gl: The gl of this ExtendedSearchRequest.  # noqa: E501
        :type: str
        """

        self._gl = gl

    @property
    def hl(self):
        """Gets the hl of this ExtendedSearchRequest.  # noqa: E501

        The language to get targeted search results.  # noqa: E501

        :return: The hl of this ExtendedSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._hl

    @hl.setter
    def hl(self, hl):
        """Sets the hl of this ExtendedSearchRequest.

        The language to get targeted search results.  # noqa: E501

        :param hl: The hl of this ExtendedSearchRequest.  # noqa: E501
        :type: str
        """

        self._hl = hl

    @property
    def device(self):
        """Gets the device of this ExtendedSearchRequest.  # noqa: E501


        :return: The device of this ExtendedSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ExtendedSearchRequest.


        :param device: The device of this ExtendedSearchRequest.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def duration(self):
        """Gets the duration of this ExtendedSearchRequest.  # noqa: E501

        Duration to get search results updated during the specified time period. <code>d</code> for last 24 hours, <code>w</code> for last 1 week, <code>m</code> for last 1 month, <code>mn</code> for last n months, and <code>y</code> for last 1 year.  # noqa: E501

        :return: The duration of this ExtendedSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ExtendedSearchRequest.

        Duration to get search results updated during the specified time period. <code>d</code> for last 24 hours, <code>w</code> for last 1 week, <code>m</code> for last 1 month, <code>mn</code> for last n months, and <code>y</code> for last 1 year.  # noqa: E501

        :param duration: The duration of this ExtendedSearchRequest.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def autocorrect(self):
        """Gets the autocorrect of this ExtendedSearchRequest.  # noqa: E501

        Should Google autocorrect your typos? Send 1 if that's the case or send 0 if you want to disable autocorrection.  # noqa: E501

        :return: The autocorrect of this ExtendedSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._autocorrect

    @autocorrect.setter
    def autocorrect(self, autocorrect):
        """Sets the autocorrect of this ExtendedSearchRequest.

        Should Google autocorrect your typos? Send 1 if that's the case or send 0 if you want to disable autocorrection.  # noqa: E501

        :param autocorrect: The autocorrect of this ExtendedSearchRequest.  # noqa: E501
        :type: int
        """

        self._autocorrect = autocorrect

    @property
    def page(self):
        """Gets the page of this ExtendedSearchRequest.  # noqa: E501

        The page to get search results for. By default, the first page's results are returned.  # noqa: E501

        :return: The page of this ExtendedSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ExtendedSearchRequest.

        The page to get search results for. By default, the first page's results are returned.  # noqa: E501

        :param page: The page of this ExtendedSearchRequest.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def uule(self):
        """Gets the uule of this ExtendedSearchRequest.  # noqa: E501

        An encoded string to force a place or an exact location to get targeted results.  # noqa: E501

        :return: The uule of this ExtendedSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._uule

    @uule.setter
    def uule(self, uule):
        """Sets the uule of this ExtendedSearchRequest.

        An encoded string to force a place or an exact location to get targeted results.  # noqa: E501

        :param uule: The uule of this ExtendedSearchRequest.  # noqa: E501
        :type: str
        """

        self._uule = uule

    @property
    def num(self):
        """Gets the num of this ExtendedSearchRequest.  # noqa: E501

        Specify how many results should be retrieved per page.  # noqa: E501

        :return: The num of this ExtendedSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this ExtendedSearchRequest.

        Specify how many results should be retrieved per page.  # noqa: E501

        :param num: The num of this ExtendedSearchRequest.  # noqa: E501
        :type: int
        """

        self._num = num

    @property
    def output(self):
        """Gets the output of this ExtendedSearchRequest.  # noqa: E501

        Result output format. You can request either parsed JSON or the raw HTML.  # noqa: E501

        :return: The output of this ExtendedSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this ExtendedSearchRequest.

        Result output format. You can request either parsed JSON or the raw HTML.  # noqa: E501

        :param output: The output of this ExtendedSearchRequest.  # noqa: E501
        :type: str
        """

        self._output = output

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
