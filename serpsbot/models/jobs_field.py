# coding: utf-8

"""
    SerpsBot

    Our APIs allow data miners to harvest huge volumes of data from Google and other search engines.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobsField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'complete': 'int',
        'inprogress': 'int',
        'queued': 'int',
        'failed': 'int',
        'draft': 'int'
    }

    attribute_map = {
        'total': 'total',
        'complete': 'complete',
        'inprogress': 'inprogress',
        'queued': 'queued',
        'failed': 'failed',
        'draft': 'draft'
    }

    def __init__(self, total=None, complete=None, inprogress=None, queued=None, failed=None, draft=None):  # noqa: E501
        """JobsField - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._complete = None
        self._inprogress = None
        self._queued = None
        self._failed = None
        self._draft = None
        self.discriminator = None
        self.total = total
        self.complete = complete
        self.inprogress = inprogress
        self.queued = queued
        self.failed = failed
        self.draft = draft

    @property
    def total(self):
        """Gets the total of this JobsField.  # noqa: E501

        The number of jobs the user has launched so far.  # noqa: E501

        :return: The total of this JobsField.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this JobsField.

        The number of jobs the user has launched so far.  # noqa: E501

        :param total: The total of this JobsField.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def complete(self):
        """Gets the complete of this JobsField.  # noqa: E501

        The number of jobs that have been processed already.  # noqa: E501

        :return: The complete of this JobsField.  # noqa: E501
        :rtype: int
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this JobsField.

        The number of jobs that have been processed already.  # noqa: E501

        :param complete: The complete of this JobsField.  # noqa: E501
        :type: int
        """
        if complete is None:
            raise ValueError("Invalid value for `complete`, must not be `None`")  # noqa: E501

        self._complete = complete

    @property
    def inprogress(self):
        """Gets the inprogress of this JobsField.  # noqa: E501

        The number of jobs currently being processed.  # noqa: E501

        :return: The inprogress of this JobsField.  # noqa: E501
        :rtype: int
        """
        return self._inprogress

    @inprogress.setter
    def inprogress(self, inprogress):
        """Sets the inprogress of this JobsField.

        The number of jobs currently being processed.  # noqa: E501

        :param inprogress: The inprogress of this JobsField.  # noqa: E501
        :type: int
        """
        if inprogress is None:
            raise ValueError("Invalid value for `inprogress`, must not be `None`")  # noqa: E501

        self._inprogress = inprogress

    @property
    def queued(self):
        """Gets the queued of this JobsField.  # noqa: E501

        The number of jobs in the queue.  # noqa: E501

        :return: The queued of this JobsField.  # noqa: E501
        :rtype: int
        """
        return self._queued

    @queued.setter
    def queued(self, queued):
        """Sets the queued of this JobsField.

        The number of jobs in the queue.  # noqa: E501

        :param queued: The queued of this JobsField.  # noqa: E501
        :type: int
        """
        if queued is None:
            raise ValueError("Invalid value for `queued`, must not be `None`")  # noqa: E501

        self._queued = queued

    @property
    def failed(self):
        """Gets the failed of this JobsField.  # noqa: E501

        The number of failed jobs.  # noqa: E501

        :return: The failed of this JobsField.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this JobsField.

        The number of failed jobs.  # noqa: E501

        :param failed: The failed of this JobsField.  # noqa: E501
        :type: int
        """
        if failed is None:
            raise ValueError("Invalid value for `failed`, must not be `None`")  # noqa: E501

        self._failed = failed

    @property
    def draft(self):
        """Gets the draft of this JobsField.  # noqa: E501

        The number of jobs with incomplete details.  # noqa: E501

        :return: The draft of this JobsField.  # noqa: E501
        :rtype: int
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this JobsField.

        The number of jobs with incomplete details.  # noqa: E501

        :param draft: The draft of this JobsField.  # noqa: E501
        :type: int
        """
        if draft is None:
            raise ValueError("Invalid value for `draft`, must not be `None`")  # noqa: E501

        self._draft = draft

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobsField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
